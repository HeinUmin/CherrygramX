name: Build release APK

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      upload:
        description: 'Upload: If want ignore'
        required: false

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      APK_OUTPUT_PATH: 'TMessagesProj_AppStandalone/build/outputs/apk/afat/standalone'
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_MAXSIZE: "10G"
      CCACHE_HARDLINK: "true"
      COMMIT_MESSAGE: |+
        New push to GitHub\!
        ```
        ${{ github.event.head_commit.message }}
        ```by `${{ github.event.head_commit.author.name }}`
        See commit detail [here](${{ github.event.head_commit.url }})
      COMMIT_URL: ${{ github.event.head_commit.url }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Update packages
      run: sudo apt-get update

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        cache: 'gradle'

    - name: Cache Gradle Build
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches/build-cache-*
          ~/.gradle/buildOutputCleanup/cache.properties
          ./.gradle
        key: gradle-builds-${{ runner.os }}
        restore-keys: |
          gradle-builds

    - name: Set up ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ccache
        restore-keys: ccache

    - name: Setup Android SDK Tools
      uses: android-actions/setup-android@v2

    - name: Prepare Environment
      run: |
        sudo apt-get install bison gcc make curl ninja-build ccache -y

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew :TMessagesProj_AppStandalone:assembleAfatStandalone

    - name: Upload
      if: github.event.inputs.upload != 'y'
      uses: actions/upload-artifact@v3
      with:
        name: Release APK
        path: ${{ env.APK_OUTPUT_PATH }}/*.apk

    - name: Post Artifacts to Telegram
      run: |
        export release=$(find ${{ env.APK_OUTPUT_PATH }} -name "*arm64-v8a.apk")
        ESCAPED=`python3 -c 'import json,os,urllib.parse; msg = json.dumps(os.environ["COMMIT_MESSAGE"]); print(urllib.parse.quote(msg if len(msg) <= 1024 else json.dumps(os.environ["COMMIT_URL"])))'`
        curl -v "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMediaGroup?chat_id=${{ secrets.TELEGRAM_CHAT_ID }}&media=%5B%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2Frelease%22%2C%22parse_mode%22%3A%22MarkdownV2%22%2C%22caption%22:${ESCAPED}%7D%5D" \
          -F release="@$release"
